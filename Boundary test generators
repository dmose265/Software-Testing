
# -*- coding: utf-8 -*-
"""
Created on  October 24 19:57:45 2020

@author: Dennis Masigwa
"""

import numpy as np
import sys
def BVA(a, n):#Boundary Value Analysis   
    testcase = np.zeros((n,5));
    #testcases = 4*n + 1; #Number of test cases for  boundary value analysis
    i=0
    for i in range(n):
        #min-value, min+, nominal, max-, max
            testcase[i][0]=a[i][0]
            testcase[i][1]=a[i][0]+1
            testcase[i][2]=(a[i][0] + a[i][1])/2
            testcase[i][3]=a[i][1]-1
            testcase[i][4]=a[i][1]
    i = i + 1
  
    for i in range(n):# min,min+, nominal, max-,max range
       testcase[i] = (a[i][0]), (a[i][0]+1), ((a[i][0] + a[i][1])/2), (a[i][1]), (a[i][1]-1)
       
    if n == 3:
        testid=1        
        for i in range(5):
            print(testid,"",n,"",testcase[0][2], " ", testcase[1][2], " ", testcase[2][i])
            testid+=1
        testid=6
        for j in range(5):
            if j != 2:
                print(testid,"",n,"",testcase[0][2], " ", testcase[1][j], " ", testcase[2][2])
                testid+=1
        testid=10
        for k in range(5):
            if k != 2:
                print(testid,"",n,"",testcase[0][k], " ", testcase[1][2], " ", testcase[2][2])
                testid+=1

    testid=1
    if n == 2:
        for i in range(5):
            print(testid,"",n,"",testcase[0][2], " ", testcase[1][i])
            testid+=1
        testid=6
        for j in range(5):
            if j != 2:
               print(testid,"",n,"",testcase[0][j], " ", testcase[1][2])
               testid+=1
def WorstCase(a, n):#worstcase testing
    testcase = np.zeros((n,5))
    i=0
    for i in range(n):
        #min-value, min+, nominal, max-, max, min-,max+
            testcase[i][0]=a[i][0]
            testcase[i][1]=a[i][0]+1
            testcase[i][2]=(a[i][0] + a[i][1])/2
            testcase[i][3]=a[i][1]-1
            testcase[i][4]=a[i][1]
    i = i + 1   
    for i in range(n):
        testcase[i] = (a[i][0]), (a[i][0]+1), ((a[i][0] + a[i][1])/2), (a[i][1]), (a[i][1]-1)
    #testcases = pow(5,n);
    testid=1
    if n == 3: #variables are 3
        for i in range(5): 
            for j in range(5):
                for k in range (5):
                    print(testid,"",n,"",testcase[0][i], " ", testcase[1][j], " ", testcase[2][k])
                    testid+=1
    testid=1
    if n == 2: #variables are two
        for i in range(5):
            for j in range(5):
                print(testid,"",n,"",testcase[0][i], " ", testcase[1][j])
                testid+=1
    
                    
def Robustness(a, n):#Robustness testing
    testcase = np.zeros((n,7));
    i=0
    for i in range(n):
        #min, min+, nominal, max-, max, min-,max+
            testcase[i]=a[i][0]
            testcase[i]=a[i][0]+1
            testcase[i]=int((a[i][0] + a[i][1])/2)
            testcase[i]=a[i][1]-1
            testcase[i]=a[i][1]
            testcase[i]=a[i][0]-1
            testcase[i]=a[i][1]+1
    i = i + 1
    #6*numberOfVariable + 1
    for i in range(n):#min, min+, nominal, max-, max, min-,max+
        testcase[i] = [a[i][0]-1, a[i][0], a[i][0]+1, (a[i][0]+a[i][1])/2, a[i][1]-1, a[i][1],a[i][1]+1]
        testid=1
    if n == 3:
        for i in range(7):
            print(testid,"",n,"",testcase[0][3], " ", testcase[1][3], " ", testcase[2][i])
            testid+=1
        testid=8
        for j in range(7):
            if j != 3:
                print(testid,"",n,"",testcase[0][3], " ", testcase[1][j], " ", testcase[2][3])
                testid+=1
        testid=14
        for k in range(7):
            if k != 3:
                print(testid,"",n,"",testcase[0][k], " ", testcase[1][3], " ", testcase[2][3])
                testid+=1  
    testid=1
    if n == 2:
        for i in range(7):
            print(testid,"",n,"",testcase[0][3], " ", testcase[1][i])
            testid+=1
        testid=8
        for j in range(7):
            if j != 3:
                print(testid,"",n,"",testcase[0][j], " ", testcase[1][3])
                testid+=1
    
    

           
def WorstCaseRobustness(a, n):#WorstCase Robustness testing
    testcase = np.zeros((n,7))
    #testCases = pow(7,n);
    i=0
    for i in range(n):
        #min-value, min+, nominal, max-, max, min-,max+
            testcase[i]=a[i][0]
            testcase[i]=a[i][0]+1
            testcase[i]=int((a[i][0] + a[i][1])/2)
            testcase[i]=a[i][1]-1
            testcase[i]=a[i][1]
            testcase[i]=a[i][0]-1
            testcase[i]=a[i][1]+1
    i = i + 1
    for i in range(n):
        testcase[i] = [a[i][0]-1, a[i][0], a[i][0]+1, a[i][0]+a[i][1]/2, a[i][1]-1, a[i][1],a[i][1]+1]
    testid=1
    #numberOfTestCases = pow(7,n); #number of Testcases for  worst case Robustness
    if n == 2: #when  variables are two
        for i in range(7):
            for j in range(7):
                print(testid,"",n,"",testcase[0][i], " ", testcase[1][j])
                testid+=1
    testid=1
    if n == 3: #when variables are three
        for i in range(7): 
            for j in range(7):
                for k in range (7):
                    print(testid,"",n,"",testcase[0][i], " ", testcase[1][j], " ", testcase[2][k])
                    testid+=1


if __name__ == "__main__":
    
    option = int(input("1. Boundary Value Analysis\n2. Robustness Testing\n3. Worst-case Testing\n4. Worst-case Robustness Testing\nPlease select one of the 4 options above: ")) 
        
    variable_option = int(input("1. For Two-variables\n2. Three-variables\n3. Four-variables\nPlease select the number of variables: "))
    n = variable_option+1
    #if option==3:
      #  print("Sorry no testcases for 4 variables")
     #   sys.exit()
#Variable range   
    variable_range = []
    a = np.zeros((n,5))
     #loop for entering min and max numbers in the range  and incremental condition     
    for i in range(n):
        print("Enter the minimum number in the range  of variables", i+1,)#min of range
        a[i][0] = input()
        print("Enter the maximum number in the range of variables", i+1,)  #max of range 
        a[i][1] =input()
        
    if option == 1: #option for Boundary Value testing
        BVA(a,n)
    if option == 2:#option for Robustness testing
        Robustness(a, n) 
    if option == 3: #option for WorstCase testing
        WorstCase(a, n)
    if option == 4:#option for WorstCase Robustness testing
        WorstCaseRobustness(a, n)
    
